name: OpenWrt Builder (Optimized)

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  BUILD_ROOT: /builder/openwrt  # 新增虚拟磁盘挂载点

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    # ==================== 初始化阶段 ====================
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 系统级深度清理（保留原有清理逻辑）
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        # 精简依赖安装列表（保持编译必需项）
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install \
          ack autoconf automake binutils bison build-essential \
          bzip2 ccache cmake cpio curl flex gawk gcc-multilib g++-multilib \
          git gperf libncurses5-dev libssl-dev libtool lrzsz make \
          patch pkgconf python3 python3-pyelftools rsync subversion \
          texinfo uglifyjs unzip wget xxd zlib1g-dev  # 移除非必要包

        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

        # 创建虚拟磁盘（新增优化步骤）
        sudo apt-get -y install xfsprogs lvm2
        sudo truncate -s 20G /virtual-disk.img
        sudo losetup /dev/loop3 /virtual-disk.img
        sudo pvcreate /dev/loop3
        sudo vgcreate build_vg /dev/loop3
        sudo lvcreate -n build_lv -l 100%FREE build_vg
        sudo mkfs.xfs /dev/mapper/build_vg-build_lv
        sudo mkdir -p ${{ env.BUILD_ROOT }}
        sudo mount /dev/mapper/build_vg-build_lv ${{ env.BUILD_ROOT }}
        sudo chown -R $(id -u):$(id -g) ${{ env.BUILD_ROOT }}
        df -hT ${{ env.BUILD_ROOT }}

    # ==================== 源码管理阶段 ====================
    - name: Clone source code
      working-directory: ${{ env.BUILD_ROOT }}/..
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt --depth=1  # 浅层克隆
        ln -sf $(pwd)/openwrt $GITHUB_WORKSPACE/openwrt
        echo "源码目录大小：" && du -sh openwrt

    # ==================== 自定义配置阶段（保留原有逻辑）====================
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF ${{ env.BUILD_ROOT }}/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd ${{ env.BUILD_ROOT }}
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      working-directory: ${{ env.BUILD_ROOT }}
      run: ./scripts/feeds update -a

    - name: Install feeds
      working-directory: ${{ env.BUILD_ROOT }}
      run: ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files ${{ env.BUILD_ROOT }}/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ${{ env.BUILD_ROOT }}/.config
        chmod +x $DIY_P2_SH
        cd ${{ env.BUILD_ROOT }}
        $GITHUB_WORKSPACE/$DIY_P2_SH

    # ==================== 编译阶段（优化下载和编译）====================
    - name: Download package
      working-directory: ${{ env.BUILD_ROOT }}
      run: |
        make defconfig
        make download -j$(($(nproc) + 2))  # 动态线程数
        # 增强清理逻辑
        find dl -size -1k -delete -print | xargs -I{} echo "删除无效文件: {}"
        find dl -name "*.zip" -mtime +1 -delete

    - name: Compile the firmware
      working-directory: ${{ env.BUILD_ROOT }}
      run: |
        # 分阶段编译（新增优化）
        time make -j$(nproc) tools/compile || true
        time make -j$(nproc) toolchain/compile || true
        time make -j$(nproc) package/compile || true
        time make -j$(nproc) || make -j1 || make -j1 V=s
        
        # 清理中间文件（新增）
        rm -rf build_dir/target-*/tmp
        find . -name "*.o" -delete
        
        # 保留原有输出逻辑
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    # ==================== 产物处理阶段（保留原有逻辑）====================
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.BUILD_ROOT }}/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd ${{ env.BUILD_ROOT }}/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    # ==================== 发布阶段（保留原有逻辑）====================
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    # ==================== 清理阶段（新增虚拟磁盘清理）====================
    - name: Cleanup
      if: always()
      run: |
        sudo umount ${{ env.BUILD_ROOT }} || true
        sudo vgremove -y build_vg || true
        sudo losetup -D || true
        sudo rm -f /virtual-disk.img
        # 保留原有清理动作
        sudo docker system prune -af
        sudo rm -rf /workdir
