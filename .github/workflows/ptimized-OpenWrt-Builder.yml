# 由深度求索(DeepSeek)优化的工作流配置 
# 版本：OpenWrt-Builder-2.1 
# 适配日期：2025-02-11 
 
name: 🛠️ OpenWrt Automated Builder 
 
on:
  workflow_dispatch:    # 手动触发 
  push:                 # 代码推送触发 
    branches:
      - master 
    paths:
      - '**/config/**'
      - '**/diy-*.sh'
 
env:
  REPO_URL: "https://github.com/coolsnowwolf/lede" 
  REPO_BRANCH: "master"
  BUILD_THREADS: "${{ github.run_number  % 8 + 1 }}"  # 动态线程控制 
  CCACHE_DIR: "/builder/ccache"                      # 缓存复用路径 
  TZ: "Asia/Shanghai"
 
jobs:
  build:
    name: "🏗️ Build OpenWrt (Ubuntu 24.04)"
    runs-on: ubuntu-24.04 
    timeout-minutes: 180 
 
    steps:
    # ================= 初始化阶段 ================= 
    - name: "🔍 Checkout Code"
      uses: actions/checkout@v4 
      with:
        submodules: recursive 
 
    - name: "💽 Storage Optimization"
      run: |
        # 精确计算可用空间（GB单位）
        mnt_avail=$(df --output=avail -B1G /mnt | tail -1 | tr -d ' ')
        mnt_size=$((mnt_avail - 1))  # 保留1GB缓冲 
        
        root_avail=$(df --output=avail -B1G / | tail -1 | tr -d ' ')
        root_size=$((root_avail - 2))  # 保留2GB缓冲 
        
        # 创建虚拟磁盘 
        sudo truncate -s "${mnt_size}G" /mnt/mnt.img  
        sudo truncate -s "${root_size}G" /root.img  
        
        # LVM动态配置 
        sudo losetup /dev/loop6 /mnt/mnt.img  
        sudo losetup /dev/loop7 /root.img  
        sudo pvcreate /dev/loop[6-7]
        sudo vgcreate builder_vg /dev/loop[6-7]
        sudo lvcreate -l 100%FREE -n workspace builder_vg 
        sudo mkfs.xfs  /dev/builder_vg/workspace 
        sudo mkdir -p /builder 
        sudo mount /dev/builder_vg/workspace /builder 
        sudo chown -R runner:runner /builder 
 
    # ================= 环境准备阶段 ================= 
    - name: "⚙️ Setup Environment"
      env:
        DEBIAN_FRONTEND: noninteractive 
      run: |
        # 系统包管理 
        sudo apt-get -y purge azure* google* microsoft* phy* moby*  # 移除无用组件 
        sudo apt-get -qq update 
        sudo apt-get -qq install \
          build-essential ccache cmake curl libncurses-dev \ 
          python3-dev rsync unzip zlib1g-dev git-lfs 
        
        # 时区配置 
        sudo timedatectl set-timezone "$TZ"
        
        # 缓存系统配置 
        sudo mkdir -p $CCACHE_DIR 
        sudo chown -R runner:runner $CCACHE_DIR 
        echo "max_size = 10.0G" | sudo tee $CCACHE_DIR/ccache.conf  
 
    # ================= 代码构建阶段 ================= 
    - name: "📥 Clone Repository"
      working-directory: /builder 
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt 
        ln -sf /builder/openwrt $GITHUB_WORKSPACE/openwrt 
 
    - name: "🔧 Custom Configuration"
      run: |
        # 应用自定义配置 
        [ -e feeds.conf.default  ] && cp feeds.conf.default  openwrt/
        [ -e diy-part1.sh  ] && chmod +x diy-part1.sh  && ./diy-part1.sh  
        
        # 初始化编译环境 
        cd openwrt 
        ./scripts/feeds update -a 
        ./scripts/feeds install -a 
        [ -e ../.config ] && cp ../.config .config 
        make defconfig 
 
    - name: "🚀 Build Firmware"
      id: compile 
      run: |
        cd openwrt 
        echo "CCACHE_DIR=$CCACHE_DIR" >> $GITHUB_ENV 
        
        # 智能编译控制 
        if [ $BUILD_THREADS -gt 1 ]; then 
          make -j$BUILD_THREADS || make -j1 V=s 
        else 
          make -j1 V=s 
        fi 
 
        # 构建结果验证 
        if [ -f bin/targets/*/*/openwrt-* ]; then 
          echo "status=success" >> $GITHUB_OUTPUT 
          echo "BUILD_STATUS=✅ Success" >> $GITHUB_ENV 
        else 
          echo "status=failure" >> $GITHUB_OUTPUT 
          echo "BUILD_STATUS=❌ Failed" >> $GITHUB_ENV 
          exit 1 
        fi 
 
    # ================= 产物处理阶段 ================= 
    - name: "📦 Package Artifacts"
      if: steps.compile.outputs.status  == 'success'
      run: |
        cd openwrt/bin/targets 
        TARGET_DIR=$(find . -maxdepth 2 -type d -name 'openwrt-*' | head -1)
        echo "FIRMWARE_PATH=$PWD/$TARGET_DIR" >> $GITHUB_ENV 
        
        # 生成版本标识 
        echo "BUILD_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV 
        echo "BUILD_DATE=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV 
 
    - name: "📤 Upload to Artifacts"
      uses: actions/upload-artifact@v4 
      with:
        name: "firmware-${{ env.BUILD_HASH }}"
        path: ${{ env.FIRMWARE_PATH }}
 
    # ================= 发布阶段 ================= 
    - name: "🚀 GitHub Release"
      uses: softprops/action-gh-release@v1 
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "build-${{ env.BUILD_DATE }}"
        name: "Build ${{ env.BUILD_HASH }}"
        body: |
          ### 🛠️ Build Information 
          - Status: ${{ env.BUILD_STATUS }}
          - Commit: [${{ env.BUILD_HASH }}](https://github.com/${{  github.repository  }}/commit/${{ github.sha  }})
          - Timestamp: ${{ steps.date.outputs.timestamp  }}
        files: ${{ env.FIRMWARE_PATH }}/* 
 
    # ================= 收尾阶段 ================= 
    - name: "🧹 Cleanup"
      if: always()
      run: |
        sudo umount /builder 
        sudo vgremove -f builder_vg 
        sudo losetup -D 
        sudo rm -f /mnt/mnt.img  /root.img  
